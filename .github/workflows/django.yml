name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Django settings
  DJANGO_SETTINGS_MODULE: smartpark.settings.dev
  DJANGO_SECRET_KEY: test-secret-key-for-ci-only-not-production
  DJANGO_DEBUG: False
  DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/smartpark_test_db
  CORS_ALLOWED_ORIGINS: http://localhost:3000

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
        django-version: ['5.2']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: smartpark_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install coverage pytest-django

    - name: Wait for PostgreSQL
      run: |
        while ! pg_isready -h localhost -p 5432 -U postgres; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run Django system checks
      working-directory: ./backend
      run: |
        python manage.py check --deploy

    - name: Check for missing migrations
      working-directory: ./backend
      run: |
        python manage.py makemigrations --check --dry-run

    - name: Run migrations
      working-directory: ./backend
      run: |
        python manage.py migrate

    - name: Run tests with coverage
      working-directory: ./backend
      run: |
        coverage run --source='.' manage.py test
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      if: matrix.python-version == '3.13'
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Check code formatting with Black
      run: |
        black --check --diff backend/

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff backend/

    - name: Lint with flake8
      run: |
        flake8 backend/ --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type checking with mypy (optional)
      continue-on-error: true
      run: |
        mypy backend/ --ignore-missing-imports

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Check dependencies for vulnerabilities
      run: |
        safety check -r requirements/base.txt

    - name: Run bandit security linter
      run: |
        bandit -r backend/ -x backend/*/tests/,backend/*/migrations/

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt

    - name: Collect static files
      working-directory: ./backend
      env:
        DJANGO_SETTINGS_MODULE: smartpark.settings.prod
        DJANGO_SECRET_KEY: build-secret-key-for-ci-only
        DATABASE_URL: sqlite:///db.sqlite3
      run: |
        python manage.py collectstatic --noinput

    - name: Build success notification
      run: |
        echo "âœ… Build completed successfully!"
        echo "ðŸ“¦ Ready for deployment"