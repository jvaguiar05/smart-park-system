# =====================================
# SmartPark - Docker Compose Setup
# =====================================
# Este é o único arquivo docker-compose necessário!
# Para desenvolvimento: docker-compose up -d
# Para produção: docker-compose -f docker-compose.yml up -d

version: '3.8'

services:
  # ==================
  # Database Service
  # ==================
  db:
    image: postgres:15-alpine
    container_name: smartpark_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-smartpark_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - smartpark_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-smartpark_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ================
  # Redis Service
  # ================
  redis:
    image: redis:7-alpine
    container_name: smartpark_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - smartpark_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ======================
  # Web Application
  # ======================
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: smartpark_web
    restart: unless-stopped
    environment:
      # Django Settings
      DJANGO_SETTINGS_MODULE: smartpark.settings.prod
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG:-False}
      DJANGO_ALLOWED_HOSTS: ${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      
      # Database Configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-smartpark_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-smartpark_db}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379/0
      
      # CORS Configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      
      # Additional Settings
      LOAD_INITIAL_DATA: ${LOAD_INITIAL_DATA:-false}
    ports:
      - "${WEB_PORT:-8000}:8000"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartpark_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/core/health/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ================
  # Nginx Proxy
  # ================
  nginx:
    image: nginx:alpine
    container_name: smartpark_nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx-default.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/app/static:ro
      - media_volume:/app/media:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - smartpark_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ====================
  # Celery Worker (Optional)
  # ====================
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: smartpark_celery
    restart: unless-stopped
    command: celery -A smartpark worker -l info
    environment:
      DJANGO_SETTINGS_MODULE: smartpark.settings.prod
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-smartpark_db}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartpark_network
    profiles:
      - full  # Only start with --profile full

  # =======================
  # Celery Beat (Optional)
  # =======================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    container_name: smartpark_celery_beat
    restart: unless-stopped
    command: celery -A smartpark beat -l info
    environment:
      DJANGO_SETTINGS_MODULE: smartpark.settings.prod
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DATABASE_URL: postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-smartpark_db}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smartpark_network
    profiles:
      - full  # Only start with --profile full

# =============
# Volumes
# =============
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

# =============
# Networks
# =============
networks:
  smartpark_network:
    driver: bridge