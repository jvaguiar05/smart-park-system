Project SmartPark {
  database_type: "PostgreSQL"
  Note: "SmartPark MVP schema — normalized, tenant-aware, and event-driven. Authentication flow people→users→client_members included."
}

/**********************************************************

* IDENTIDADE & ACESSO (MVP)
 **********************************************************/

table people {
  id          bigserial   [pk]
  public_id   uuid        [not null, default: `gen_random_uuid()`]
  name        varchar(80) [not null]
  email       varchar(255) [not null]
  created_at  timestamptz [not null, default: `now()`]
  updated_at  timestamptz [not null, default: `now()`]
  deleted_at  timestamptz

  indexes {
    (email) [unique]
  }

  Note: 'Pessoa física central para referenciar accounts (users).'
}

table users {
  id            bigserial   [pk]
  public_id     uuid        [not null, default: `gen_random_uuid()`]
  person_id     bigint      [not null, ref: > people.id]
  password_hash text        [not null]
  is_active     bool        [not null, default: true]
  created_at    timestamptz [not null, default: `now()`]
  updated_at    timestamptz [not null, default: `now()`]
  deleted_at    timestamptz

  indexes {
    (person_id) [unique] // 1 pessoa -> 1 conta
  }

  Note: "Conta técnica de acesso. Permissões globais e por cliente."
}

table roles {
  id    serial      [pk]
  name  varchar(40) [not null, unique] // admin, client_admin, operator, app_user

  Note: 'Papéis globais do sistema.'
}

table user_roles {
  user_id     bigint      [not null, ref: > users.id]
  role_id     int         [not null, ref: > roles.id]
  assigned_at timestamptz [not null, default: `now()`]

  indexes {
    (user_id, role_id) [unique]
  }

  Note: "Papéis globais atribuídos ao usuário."
}

table refresh_tokens {
  id           bigserial   [pk]
  user_id      bigint      [not null, ref: > users.id]
  token_hash   text        [not null, note: 'SHA256 do refresh token']
  expires_at   timestamptz [not null]
  revoked_at   timestamptz
  fingerprint  text
  ip           inet
  user_agent   text
  created_at   timestamptz [not null, default: `now()`]

  indexes { (user_id) }
  Note: "Rotação e revogação de sessões."
}

/**********************************************************

* TENANT (EMPRESAS CLIENTES) & MEMBROS ADMIN (MVP)
 **********************************************************/

table clients {
  id                 bigserial    [pk]
  public_id          uuid         [not null, default: `gen_random_uuid()`]
  name               varchar(120) [not null]
  onboarding_status  varchar(32)  [not null, default: 'PENDING']
  created_at         timestamptz  [not null, default: `now()`]
  updated_at         timestamptz  [not null, default: `now()`]
  deleted_at         timestamptz

  indexes { (name) }

  Note: "Empresa (tenant). Fluxo simples de onboarding no MVP."
}

table client_members {
  client_id  bigint      [not null, ref: > clients.id]
  user_id    bigint      [not null, ref: > users.id]
  role_id    int         [not null, ref: > roles.id] // papel dentro do cliente
  joined_at  timestamptz [not null, default: `now()`]

  indexes {
    (client_id, user_id) [unique]
  }

  Note: "Vincula contas administrativas ao tenant e define papel por cliente."
}

/**********************************************************

* CATÁLOGO DE LOCAIS (MVP)
 **********************************************************/

table store_types {
  id   serial      [pk]
  name varchar(50) [not null, unique] // shopping, mercado, hospital, etc.

  Note: "Categorias para navegação/paginação de estabelecimentos no front."
}

table establishments {
  id           bigserial     [pk]
  public_id    uuid          [not null, default: `gen_random_uuid()`]
  client_id    bigint        [not null, ref: > clients.id]
  name         varchar(120)  [not null]
  store_type_id int          [ref: > store_types.id]
  // Endereço simplificado no MVP (pode virar Address separado no futuro)
  address      varchar(255)
  city         varchar(100)
  state        varchar(50)
  lat          double
  lng          double
  created_at   timestamptz   [not null, default: `now()`]
  updated_at   timestamptz   [not null, default: `now()`]
  deleted_at   timestamptz

  indexes {
    (client_id, name) [unique] // considerar parcial WHERE deleted_at IS NULL no futuro
    (store_type_id)
  }

  Note: "Unidades/lojas do cliente."
}

table lots {
  id               bigserial    [pk]
  public_id        uuid         [not null, default: `gen_random_uuid()`]
  client_id        bigint       [not null, ref: > clients.id]
  establishment_id bigint       [not null, ref: > establishments.id]
  lot_code         varchar(50)  [not null] // ex.: PÁTIO-01
  name             varchar(120)
  created_at       timestamptz  [not null, default: `now()`]
  updated_at       timestamptz  [not null, default: `now()`]
  deleted_at       timestamptz

  indexes {
    (client_id, lot_code) [unique] // considerar parcial WHERE deleted_at IS NULL
  }

  Note: "Áreas/pátios dentro do estabelecimento."
}

/**********************************************************

* MAPA & VAGAS (MVP)
 **********************************************************/

table slot_types {
  id   serial      [pk]
  name varchar(30) [not null, unique] // regular, moto, PCD etc.

  Note: "Tipos básicos de vaga (MVP)."
}

table vehicle_types {
  id   serial      [pk]
  name varchar(30) [not null, unique] // car, motorcycle

  Note: "Classificação mínima do algoritmo (carro x moto)."
}

table slots {
  id           bigserial   [pk]
  public_id    uuid        [not null, default: `gen_random_uuid()`]
  client_id    bigint      [not null, ref: > clients.id]
  lot_id       bigint      [not null, ref: > lots.id]
  slot_code    varchar(10) [not null] // A1, A2...
  slot_type_id int         [not null, ref: > slot_types.id]
  polygon_json jsonb       [not null] // polígonos no frame atual (sem versionar no MVP)
  active       boolean     [not null, default: true]
  created_at   timestamptz [not null, default: `now()`]
  updated_at   timestamptz [not null, default: `now()`]
  deleted_at   timestamptz

  indexes {
    (lot_id, slot_code) [unique]
  }

  Note: "Vagas individuais. MVP sem versionamento de mapa."
}

/**********************************************************

* STATUS / HISTÓRICO / EVENTOS (EDGE) — MVP
 **********************************************************/

table slot_status {
  id               bigserial    [pk]
  slot_id          bigint       [not null, unique, ref: > slots.id]
  status           varchar(16)  [not null] // FREE, OCCUPIED, UNKNOWN
  vehicle_type_id  int          [ref: > vehicle_types.id]
  confidence       numeric(4,3)
  changed_at       timestamptz  [not null, default: `now()`]

  Note: "Snapshot do estado atual da vaga."
}

table slot_status_history {
  id               bigserial     [pk]
  slot_id          bigint        [not null, ref: > slots.id]
  status           varchar(16)   [not null]
  vehicle_type_id  int           [ref: > vehicle_types.id]
  confidence       numeric(4,3)
  event_id         uuid
  recorded_at      timestamptz   [not null, default: `now()`]

  indexes { (slot_id, recorded_at) }

  Note: "Trilha para relatórios/auditoria."
}

table api_keys {
  id               bigserial     [pk]
  client_id        bigint        [not null, ref: > clients.id]
  name             varchar(100)  [not null]
  key_id           varchar(64)   [not null, unique] // público
  hmac_secret_hash text          [not null]
  enabled          boolean       [not null, default: true]
  created_at       timestamptz   [not null, default: `now()`]

  Note: "Autenticação HMAC para agentes/câmeras por cliente."
}

table cameras {
  id               bigserial     [pk]
  public_id        uuid          [not null, default: `gen_random_uuid()`]
  client_id        bigint        [not null, ref: > clients.id]
  establishment_id bigint        [ref: > establishments.id] // NULL enquanto UNASSIGNED
  lot_id           bigint        [ref: > lots.id]           // NULL enquanto UNASSIGNED
  camera_code      varchar(50)   [not null] // ex.: CAM-ENTRADA
  api_key_id       bigint        [not null, ref: > api_keys.id]
  state            varchar(16)   [not null, default: 'UNASSIGNED'] // UNASSIGNED/ASSIGNED/ONLINE/OFFLINE
  last_seen_at     timestamptz
  created_at       timestamptz   [not null, default: `now()`]
  updated_at       timestamptz   [not null, default: `now()`]

  indexes { (client_id, camera_code) [unique] }

  Note: "Inventário de dispositivos. Regra: state IN ('ASSIGNED','ONLINE') => lot_id NOT NULL."
}

table camera_heartbeats {
  id           bigserial   [pk]
  camera_id    bigint      [not null, ref: > cameras.id]
  received_at  timestamptz [not null, default: `now()`]
  payload_json jsonb

  indexes { (camera_id, received_at) }

  Note: "Telemetria básica de disponibilidade."
}

/*Opcional no MVP; manter se quiser origem canônica de mudanças
   — pode ser adicionado na 1ª iteração de relatórios/streaming*/
table slot_status_events {
  id             bigserial    [pk]
  event_id       uuid         [not null, unique]
  event_type     varchar(50)  [not null] // SlotStatusChanged
  occurred_at    timestamptz  [not null]
  client_id      bigint       [not null, ref: > clients.id]
  lot_id         bigint       [not null, ref: > lots.id]
  camera_id      bigint       [ref: > cameras.id]
  sequence       bigint
  slot_id        bigint       [not null, ref: > slots.id]
  prev_status    varchar(16)
  prev_vehicle   int          [ref: > vehicle_types.id]
  curr_status    varchar(16)  [not null]
  curr_vehicle   int          [ref: > vehicle_types.id]
  confidence     numeric(4,3)
  source_model   varchar(60)
  source_version varchar(30)
  received_at    timestamptz  [not null, default: `now()`]

  indexes { (slot_id, occurred_at) }

  Note: "Fonte de eventos para reconstrução/integrações (não estritamente necessário no MVP)."
}
