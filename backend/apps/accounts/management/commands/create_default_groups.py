from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group


class Command(BaseCommand):
    """
    Comando para criar grupos padrÃ£o do sistema

    Usage: python manage.py create_default_groups
    """

    help = "Cria os grupos padrÃ£o do sistema SmartPark"

    def handle(self, *args, **options):
        """Executar o comando"""
        groups_created = 0

        # Definir grupos padrÃ£o
        default_groups = [
            {
                "name": "admin",
                "description": "Administradores do sistema - acesso total",
            },
            {
                "name": "client_admin",
                "description": "Administradores de cliente - gerenciam prÃ³prio tenant",
            },
            {
                "name": "app_user",
                "description": "UsuÃ¡rios do aplicativo - acesso limitado a dados pÃºblicos",
            },
        ]

        for group_data in default_groups:
            group, created = Group.objects.get_or_create(name=group_data["name"])

            if created:
                groups_created += 1
                self.stdout.write(
                    self.style.SUCCESS(
                        f"âœ“ Grupo '{group.name}' criado - {group_data['description']}"
                    )
                )
            else:
                self.stdout.write(
                    self.style.WARNING(f"âš  Grupo '{group.name}' jÃ¡ existe")
                )

        if groups_created > 0:
            self.stdout.write(
                self.style.SUCCESS(
                    f"\nðŸŽ‰ {groups_created} grupos foram criados com sucesso!"
                )
            )
        else:
            self.stdout.write(
                self.style.SUCCESS("\nâœ… Todos os grupos padrÃ£o jÃ¡ existem no sistema.")
            )
